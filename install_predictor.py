#!/usr/bin/env python3
"""
Script de Instalaci√≥n - Sistema Predictor LIT + ML.

Este script instala y configura autom√°ticamente el sistema completo
de predicciones LIT + ML con integraci√≥n MetaTrader 5.
"""

import os
import sys
import subprocess
import platform
from pathlib import Path


def print_header():
    """Imprime el header del instalador."""
    print("=" * 80)
    print("üöÄ INSTALADOR SISTEMA PREDICTOR LIT + ML")
    print("=" * 80)
    print("Instalando dependencias y configurando el sistema...")
    print()


def check_python_version():
    """Verifica la versi√≥n de Python."""
    print("üîç Verificando versi√≥n de Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True


def install_dependencies():
    """Instala las dependencias requeridas."""
    print("\nüì¶ Instalando dependencias...")
    
    # Dependencias principales
    main_deps = [
        "pandas>=1.5.0",
        "numpy>=1.21.0",
        "scikit-learn>=1.1.0",
        "xgboost>=1.6.0",
        "yfinance>=0.2.0",
        "ccxt>=3.0.0",
        "ta>=0.10.0",
        "joblib>=1.2.0",
        "python-dotenv>=0.19.0",
        "pyyaml>=6.0"
    ]
    
    # Dependencias opcionales
    optional_deps = [
        "MetaTrader5",  # Para integraci√≥n MT5
        "TA-Lib"        # Para indicadores t√©cnicos avanzados
    ]
    
    try:
        # Instalar dependencias principales
        print("üîÑ Instalando dependencias principales...")
        for dep in main_deps:
            print(f"   Instalando {dep}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", dep, "--quiet"
            ])
        
        print("‚úÖ Dependencias principales instaladas")
        
        # Instalar dependencias opcionales
        print("\nüîÑ Instalando dependencias opcionales...")
        for dep in optional_deps:
            try:
                print(f"   Instalando {dep}...")
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", dep, "--quiet"
                ])
                print(f"   ‚úÖ {dep} instalado")
            except subprocess.CalledProcessError:
                print(f"   ‚ö†Ô∏è {dep} no se pudo instalar (opcional)")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias: {e}")
        return False


def create_directories():
    """Crea los directorios necesarios."""
    print("\nüìÅ Creando estructura de directorios...")
    
    directories = [
        "models",
        "logs",
        "data",
        "config",
        "results"
    ]
    
    for directory in directories:
        path = Path(directory)
        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ Creado: {directory}/")
        else:
            print(f"   ‚úì Existe: {directory}/")
    
    return True


def create_env_file():
    """Crea archivo de configuraci√≥n .env."""
    print("\n‚öôÔ∏è Creando archivo de configuraci√≥n...")
    
    env_content = """# Configuraci√≥n Sistema Predictor LIT + ML
# Generado autom√°ticamente

# Configuraci√≥n General
DEBUG=False
LOG_LEVEL=INFO

# Configuraci√≥n de Datos
DEFAULT_SYMBOL=AAPL
DEFAULT_TIMEFRAME=1h
DEFAULT_PERIODS=100

# Configuraci√≥n MT5
MT5_LOGIN=5036791117
MT5_PASSWORD=BtUvF-X8
MT5_SERVER=MetaQuotes-Demo

# Configuraci√≥n de Trading
RISK_PER_TRADE=0.02
MAX_DAILY_TRADES=10
MIN_CONFIDENCE=0.6
MAX_SPREAD=3

# Configuraci√≥n del Modelo
MODEL_PATH=models/lit_ml_model.pkl
RETRAIN_INTERVAL_DAYS=30
FEATURE_SELECTION_THRESHOLD=0.01

# Configuraci√≥n de Backtesting
BACKTEST_WINDOW_SIZE=50
BACKTEST_MIN_SAMPLES=100
"""
    
    env_path = Path(".env")
    if not env_path.exists():
        with open(env_path, "w", encoding="utf-8") as f:
            f.write(env_content)
        print("   ‚úÖ Archivo .env creado")
    else:
        print("   ‚úì Archivo .env ya existe")
    
    return True


def test_installation():
    """Prueba la instalaci√≥n."""
    print("\nüß™ Probando instalaci√≥n...")
    
    try:
        # Probar imports principales
        print("   Probando imports...")
        import pandas as pd
        import numpy as np
        import sklearn
        import xgboost as xgb
        import yfinance as yf
        print("   ‚úÖ Imports principales - OK")
        
        # Probar estructura del proyecto
        print("   Verificando estructura del proyecto...")
        required_files = [
            "src/models/predictor.py",
            "src/integrations/mt5_predictor.py",
            "scripts/run_predictions.py",
            "scripts/train_model.py"
        ]
        
        for file_path in required_files:
            if not Path(file_path).exists():
                print(f"   ‚ùå Archivo faltante: {file_path}")
                return False
            
        print("   ‚úÖ Estructura del proyecto - OK")
        
        # Probar carga de m√≥dulos
        print("   Probando carga de m√≥dulos...")
        sys.path.append(str(Path.cwd()))
        
        try:
            from src.models.predictor import LITMLPredictor
            from src.integrations.mt5_predictor import create_mt5_predictor
            print("   ‚úÖ M√≥dulos del sistema - OK")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è Advertencia en m√≥dulos: {e}")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Error en imports: {e}")
        return False


def show_next_steps():
    """Muestra los pr√≥ximos pasos."""
    print("\n" + "=" * 80)
    print("‚úÖ INSTALACI√ìN COMPLETADA EXITOSAMENTE")
    print("=" * 80)
    
    print("\nüìö PR√ìXIMOS PASOS:")
    print()
    print("1. üéØ Entrenar tu primer modelo:")
    print("   python scripts/train_model.py")
    print()
    print("2. üîç Realizar una predicci√≥n de prueba:")
    print("   python scripts/run_predictions.py single --symbol AAPL")
    print()
    print("3. üìà Ejecutar backtesting:")
    print("   python scripts/run_predictions.py backtest --symbol AAPL --days 30")
    print()
    print("4. üöÄ Predicciones en tiempo real (requiere MT5):")
    print("   python scripts/run_predictions.py realtime --hours 1")
    print()
    print("5. üìñ Ver ejemplos de uso:")
    print("   python examples/predictor_examples.py")
    print()
    
    print("üìã ARCHIVOS DE CONFIGURACI√ìN:")
    print("   .env                    - Configuraci√≥n general")
    print("   config/training_config.json - Configuraci√≥n de entrenamiento")
    print()
    
    print("üìÅ DIRECTORIOS IMPORTANTES:")
    print("   models/                 - Modelos entrenados")
    print("   logs/                   - Archivos de log")
    print("   results/                - Resultados de backtesting")
    print()
    
    print("üìö DOCUMENTACI√ìN:")
    print("   PREDICTOR_LIT_ML.md     - Documentaci√≥n completa")
    print("   ENTRENAMIENTO_MODELO_LIT_ML.md - Gu√≠a de entrenamiento")
    print()
    
    print("‚ö†Ô∏è IMPORTANTE:")
    print("   - Siempre prueba en cuenta demo antes de usar capital real")
    print("   - Configura adecuadamente los par√°metros de riesgo")
    print("   - Monitorea constantemente el sistema en producci√≥n")
    print()


def main():
    """Funci√≥n principal del instalador."""
    print_header()
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar dependencias
    if not install_dependencies():
        print("\n‚ùå Error en la instalaci√≥n de dependencias")
        sys.exit(1)
    
    # Crear directorios
    if not create_directories():
        print("\n‚ùå Error creando directorios")
        sys.exit(1)
    
    # Crear archivo .env
    if not create_env_file():
        print("\n‚ùå Error creando configuraci√≥n")
        sys.exit(1)
    
    # Probar instalaci√≥n
    if not test_installation():
        print("\n‚ö†Ô∏è Instalaci√≥n completada con advertencias")
    
    # Mostrar pr√≥ximos pasos
    show_next_steps()


if __name__ == "__main__":
    main() 