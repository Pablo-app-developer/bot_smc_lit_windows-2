"""
Pruebas Unitarias para Conexi√≥n de Cuenta Demo.

Valida la conexi√≥n real a la cuenta demo, verifica el saldo
y ejecuta operaciones de prueba para confirmar funcionalidad.
"""

import pytest
import time
from datetime import datetime
from typing import Dict, Any

from src.brokers.demo_account_connector import (
    DemoAccountConnector, OrderSide, OrderType, OrderStatus
)
from src.utils.logger import log


class TestDemoAccountConnection:
    """Pruebas de conexi√≥n y funcionalidad de cuenta demo."""
    
    @pytest.fixture
    def connector(self):
        """Fixture para crear conector de cuenta demo."""
        return DemoAccountConnector()
    
    def test_account_connection(self, connector):
        """Prueba la conexi√≥n a la cuenta demo."""
        log.info("üîç Probando conexi√≥n a cuenta demo...")
        
        # Intentar conectar
        connection_result = connector.connect()
        
        # Verificar conexi√≥n exitosa
        assert connection_result == True, "La conexi√≥n debe ser exitosa"
        
        log.info("‚úÖ Conexi√≥n establecida correctamente")
    
    def test_account_balance_verification(self, connector):
        """Verifica el saldo real de la cuenta demo."""
        log.info("üí∞ Verificando saldo de cuenta demo...")
        
        # Conectar primero
        connector.connect()
        
        # Obtener informaci√≥n de cuenta
        account_info = connector.get_account_info()
        
        # Verificar que el saldo coincide con el reportado
        expected_balance = 2865.05
        actual_balance = account_info.balance
        
        log.info(f"Saldo esperado: ${expected_balance:,.2f}")
        log.info(f"Saldo actual: ${actual_balance:,.2f}")
        
        # Verificar saldo
        assert actual_balance == expected_balance, f"Saldo debe ser ${expected_balance:,.2f}"
        assert account_info.currency == "USD", "Moneda debe ser USD"
        assert account_info.account_id == "DEMO_001", "ID de cuenta debe ser DEMO_001"
        
        log.info("‚úÖ Saldo verificado correctamente")
        
        return actual_balance
    
    def test_account_info_completeness(self, connector):
        """Verifica que la informaci√≥n de cuenta est√© completa."""
        log.info("üìä Verificando informaci√≥n completa de cuenta...")
        
        connector.connect()
        account_info = connector.get_account_info()
        
        # Verificar campos obligatorios
        assert account_info.account_id is not None, "ID de cuenta requerido"
        assert account_info.balance > 0, "Balance debe ser positivo"
        assert account_info.equity >= 0, "Equity debe ser no negativo"
        assert account_info.margin_available >= 0, "Margen disponible debe ser no negativo"
        assert account_info.currency == "USD", "Moneda debe ser USD"
        assert account_info.leverage > 0, "Leverage debe ser positivo"
        assert isinstance(account_info.timestamp, datetime), "Timestamp debe ser datetime"
        
        log.info("‚úÖ Informaci√≥n de cuenta completa y v√°lida")
    
    def test_small_test_trade_execution(self, connector):
        """Ejecuta una operaci√≥n peque√±a de prueba."""
        log.info("üîÑ Ejecutando operaci√≥n de prueba...")
        
        connector.connect()
        
        # Verificar balance inicial
        initial_account = connector.get_account_info()
        initial_balance = initial_account.balance
        
        log.info(f"Balance inicial: ${initial_balance:,.2f}")
        
        # Ejecutar orden peque√±a de compra
        order_result = connector.place_order(
            symbol="AAPL",
            side=OrderSide.BUY,
            size=0.01,  # Tama√±o m√≠nimo
            order_type=OrderType.MARKET,
            stop_loss=None,
            take_profit=None
        )
        
        # Verificar que la orden fue exitosa
        assert order_result['success'] == True, "Orden debe ser exitosa"
        assert order_result['order_id'] is not None, "Debe tener ID de orden"
        assert order_result['position_id'] is not None, "Debe crear posici√≥n"
        
        order_id = order_result['order_id']
        position_id = order_result['position_id']
        execution_price = order_result['execution_price']
        
        log.info(f"‚úÖ Orden ejecutada: {order_id}")
        log.info(f"   Posici√≥n creada: {position_id}")
        log.info(f"   Precio de ejecuci√≥n: ${execution_price:.5f}")
        
        # Verificar que la posici√≥n existe
        positions = connector.get_positions()
        assert len(positions) > 0, "Debe haber al menos una posici√≥n"
        
        test_position = None
        for pos in positions:
            if pos.id == position_id:
                test_position = pos
                break
        
        assert test_position is not None, "Posici√≥n de prueba debe existir"
        assert test_position.symbol == "AAPL", "S√≠mbolo debe ser AAPL"
        assert test_position.side == "buy", "Lado debe ser buy"
        assert test_position.size == 0.01, "Tama√±o debe ser 0.01"
        
        log.info(f"   Posici√≥n verificada: {test_position.side} {test_position.size} {test_position.symbol}")
        
        # Esperar un momento para simular holding
        time.sleep(2)
        
        # Cerrar la posici√≥n de prueba
        close_result = connector.close_position(position_id)
        
        assert close_result['success'] == True, "Cierre debe ser exitoso"
        
        pnl = close_result['pnl']
        close_price = close_result['close_price']
        new_balance = close_result['new_balance']
        
        log.info(f"‚úÖ Posici√≥n cerrada: {position_id}")
        log.info(f"   Precio de cierre: ${close_price:.5f}")
        log.info(f"   PnL realizado: ${pnl:+.2f}")
        log.info(f"   Nuevo balance: ${new_balance:,.2f}")
        
        # Verificar que la posici√≥n fue cerrada
        updated_positions = connector.get_positions()
        position_exists = any(pos.id == position_id for pos in updated_positions)
        assert not position_exists, "Posici√≥n debe estar cerrada"
        
        # Verificar que el balance se actualiz√≥
        final_account = connector.get_account_info()
        final_balance = final_account.balance
        
        expected_balance = initial_balance + pnl
        assert abs(final_balance - expected_balance) < 0.01, "Balance debe reflejar PnL"
        
        log.info("‚úÖ Operaci√≥n de prueba completada exitosamente")
        
        return {
            'initial_balance': initial_balance,
            'final_balance': final_balance,
            'pnl': pnl,
            'execution_price': execution_price,
            'close_price': close_price
        }
    
    def test_multiple_positions_management(self, connector):
        """Prueba manejo de m√∫ltiples posiciones."""
        log.info("üìà Probando manejo de m√∫ltiples posiciones...")
        
        connector.connect()
        
        initial_positions = len(connector.get_positions())
        
        # Crear m√∫ltiples posiciones peque√±as
        positions_created = []
        
        for i in range(2):  # Crear 2 posiciones
            order_result = connector.place_order(
                symbol="AAPL",
                side=OrderSide.BUY if i % 2 == 0 else OrderSide.SELL,
                size=0.01,
                order_type=OrderType.MARKET
            )
            
            assert order_result['success'] == True, f"Orden {i+1} debe ser exitosa"
            positions_created.append(order_result['position_id'])
        
        # Verificar que las posiciones existen
        current_positions = connector.get_positions()
        assert len(current_positions) == initial_positions + 2, "Deben existir 2 posiciones nuevas"
        
        log.info(f"‚úÖ {len(positions_created)} posiciones creadas")
        
        # Cerrar todas las posiciones de prueba
        for position_id in positions_created:
            close_result = connector.close_position(position_id)
            assert close_result['success'] == True, f"Cierre de {position_id} debe ser exitoso"
        
        # Verificar que las posiciones fueron cerradas
        final_positions = connector.get_positions()
        assert len(final_positions) == initial_positions, "Posiciones deben estar cerradas"
        
        log.info("‚úÖ M√∫ltiples posiciones manejadas correctamente")
    
    def test_order_validation(self, connector):
        """Prueba validaci√≥n de √≥rdenes."""
        log.info("üîç Probando validaci√≥n de √≥rdenes...")
        
        connector.connect()
        
        # Prueba orden con tama√±o muy peque√±o
        small_order = connector.place_order(
            symbol="AAPL",
            side=OrderSide.BUY,
            size=0.001,  # Menor al m√≠nimo
            order_type=OrderType.MARKET
        )
        
        assert small_order['success'] == False, "Orden muy peque√±a debe fallar"
        assert "m√≠nimo" in small_order['error'].lower(), "Error debe mencionar tama√±o m√≠nimo"
        
        # Prueba orden con tama√±o muy grande
        large_order = connector.place_order(
            symbol="AAPL",
            side=OrderSide.BUY,
            size=100.0,  # Mayor al m√°ximo
            order_type=OrderType.MARKET
        )
        
        assert large_order['success'] == False, "Orden muy grande debe fallar"
        assert "m√°ximo" in large_order['error'].lower(), "Error debe mencionar tama√±o m√°ximo"
        
        log.info("‚úÖ Validaci√≥n de √≥rdenes funcionando correctamente")
    
    def test_trading_summary_generation(self, connector):
        """Prueba generaci√≥n de resumen de trading."""
        log.info("üìä Probando generaci√≥n de resumen...")
        
        connector.connect()
        
        # Generar resumen
        summary = connector.get_trading_summary()
        
        # Verificar estructura del resumen
        assert 'account' in summary, "Resumen debe incluir informaci√≥n de cuenta"
        assert 'trading' in summary, "Resumen debe incluir informaci√≥n de trading"
        assert 'timestamp' in summary, "Resumen debe incluir timestamp"
        
        # Verificar campos de cuenta
        account_data = summary['account']
        assert 'balance' in account_data, "Debe incluir balance"
        assert 'equity' in account_data, "Debe incluir equity"
        assert 'margin_used' in account_data, "Debe incluir margen usado"
        assert 'margin_available' in account_data, "Debe incluir margen disponible"
        
        # Verificar campos de trading
        trading_data = summary['trading']
        assert 'total_orders' in trading_data, "Debe incluir total de √≥rdenes"
        assert 'active_positions' in trading_data, "Debe incluir posiciones activas"
        
        log.info("‚úÖ Resumen de trading generado correctamente")
        
        return summary


def run_connection_validation():
    """
    Ejecuta validaci√≥n completa de conexi√≥n.
    
    Returns:
        Dict[str, Any]: Resultados de la validaci√≥n.
    """
    log.info("üöÄ INICIANDO VALIDACI√ìN DE CONEXI√ìN A CUENTA DEMO")
    log.info("=" * 60)
    
    try:
        # Crear conector
        connector = DemoAccountConnector()
        test_instance = TestDemoAccountConnection()
        
        # Ejecutar pruebas
        results = {}
        
        # 1. Prueba de conexi√≥n
        log.info("1Ô∏è‚É£ Probando conexi√≥n...")
        test_instance.test_account_connection(connector)
        results['connection'] = True
        
        # 2. Verificaci√≥n de saldo
        log.info("\n2Ô∏è‚É£ Verificando saldo...")
        balance = test_instance.test_account_balance_verification(connector)
        results['balance'] = balance
        
        # 3. Informaci√≥n completa
        log.info("\n3Ô∏è‚É£ Verificando informaci√≥n completa...")
        test_instance.test_account_info_completeness(connector)
        results['account_info'] = True
        
        # 4. Operaci√≥n de prueba
        log.info("\n4Ô∏è‚É£ Ejecutando operaci√≥n de prueba...")
        trade_result = test_instance.test_small_test_trade_execution(connector)
        results['test_trade'] = trade_result
        
        # 5. M√∫ltiples posiciones
        log.info("\n5Ô∏è‚É£ Probando m√∫ltiples posiciones...")
        test_instance.test_multiple_positions_management(connector)
        results['multiple_positions'] = True
        
        # 6. Validaci√≥n de √≥rdenes
        log.info("\n6Ô∏è‚É£ Probando validaci√≥n...")
        test_instance.test_order_validation(connector)
        results['order_validation'] = True
        
        # 7. Resumen de trading
        log.info("\n7Ô∏è‚É£ Generando resumen...")
        summary = test_instance.test_trading_summary_generation(connector)
        results['trading_summary'] = summary
        
        log.info("\n" + "=" * 60)
        log.info("‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        log.info("=" * 60)
        
        # Mostrar resumen final
        log.info("üìä RESUMEN DE VALIDACI√ìN:")
        log.info(f"   üí∞ Saldo de cuenta: ${balance:,.2f}")
        log.info(f"   üîÑ Operaci√≥n de prueba: PnL ${trade_result['pnl']:+.2f}")
        log.info(f"   üìà Balance final: ${trade_result['final_balance']:,.2f}")
        log.info(f"   ‚úÖ Conexi√≥n: EXITOSA")
        log.info(f"   ‚úÖ Trading: FUNCIONAL")
        
        return {
            'success': True,
            'results': results,
            'summary': {
                'account_balance': balance,
                'test_trade_pnl': trade_result['pnl'],
                'final_balance': trade_result['final_balance'],
                'connection_status': 'CONNECTED',
                'trading_status': 'FUNCTIONAL'
            }
        }
        
    except Exception as e:
        log.error(f"‚ùå Error en validaci√≥n: {str(e)}")
        return {
            'success': False,
            'error': str(e),
            'results': {},
            'summary': {
                'connection_status': 'FAILED',
                'trading_status': 'NON_FUNCTIONAL'
            }
        }


if __name__ == "__main__":
    # Ejecutar validaci√≥n directamente
    validation_results = run_connection_validation()
    
    if validation_results['success']:
        print("\nüéâ VALIDACI√ìN EXITOSA - CUENTA DEMO LISTA PARA TRADING")
    else:
        print(f"\n‚ùå VALIDACI√ìN FALLIDA: {validation_results['error']}") 