[tool:pytest]
# Configuración de pytest para el proyecto Bot Trading LIT ML

# Directorio de pruebas
testpaths = tests

# Patrones de archivos de prueba
python_files = test_*.py *_test.py

# Patrones de clases de prueba
python_classes = Test*

# Patrones de funciones de prueba
python_functions = test_*

# Marcadores personalizados
markers =
    unit: Pruebas unitarias rápidas
    integration: Pruebas de integración
    slow: Pruebas que tardan más tiempo
    mt5: Pruebas que requieren MetaTrader5
    network: Pruebas que requieren conexión de red

# Opciones por defecto
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes
    -ra

# Filtros de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    ignore::UserWarning:pandas.*
    ignore::UserWarning:numpy.*

# Configuración de cobertura (si se usa pytest-cov)
# addopts = --cov=src --cov-report=html --cov-report=term-missing

# Directorio de salida para reportes
# --cov-report=html:htmlcov

# Configuración de logging durante las pruebas
log_cli = false
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuración de archivos de log
log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout para pruebas (en segundos)
timeout = 300

# Configuración de paralelización (si se usa pytest-xdist)
# addopts = -n auto

# Configuración de orden de ejecución
# addopts = --random-order

# Configuración para pruebas de rendimiento
# addopts = --benchmark-only --benchmark-sort=mean 