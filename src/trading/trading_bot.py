#!/usr/bin/env python3
"""
Trading Bot - Bot de Trading Autom√°tico LIT + ML.

Este m√≥dulo integra el predictor LIT + ML con el ejecutor de trading
para crear un bot de trading completamente autom√°tico.
"""

import os
import sys
import time
import threading
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.models.predictor import LITMLPredictor
from src.trading.trade_executor import TradeExecutor, TradeSignal, RiskLevel, create_trade_executor
from src.data.data_loader import DataLoader
from src.utils.logger import log


class TradingBot:
    """
    Bot de trading autom√°tico que integra predicciones LIT + ML con ejecuci√≥n real.
    """
    
    def __init__(self,
                 model_path: str = "models/lit_ml_model.pkl",
                 symbols: List[str] = None,
                 timeframe: str = "1h",
                 prediction_interval: int = 300,  # 5 minutos
                 risk_level: str = "moderate",
                 min_confidence: float = 0.65,
                 max_spread: float = 3.0,
                 trading_enabled: bool = False):
        """
        Inicializa el bot de trading.
        
        Args:
            model_path: Ruta al modelo entrenado
            symbols: Lista de s√≠mbolos a operar
            timeframe: Marco temporal para an√°lisis
            prediction_interval: Intervalo entre predicciones (segundos)
            risk_level: Nivel de riesgo ('conservative', 'moderate', 'aggressive')
            min_confidence: Confianza m√≠nima para ejecutar operaciones
            max_spread: Spread m√°ximo permitido
            trading_enabled: Si habilitar trading real
        """
        self.model_path = model_path
        self.symbols = symbols or ['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD']
        self.timeframe = timeframe
        self.prediction_interval = prediction_interval
        self.min_confidence = min_confidence
        self.max_spread = max_spread
        self.trading_enabled = trading_enabled
        
        # Componentes principales
        self.predictor = LITMLPredictor(model_path)
        self.executor = create_trade_executor(risk_level)
        self.data_loader = DataLoader()
        
        # Estado del bot
        self.running = False
        self.paused = False
        self.emergency_stop_triggered = False
        
        # Hilos de ejecuci√≥n
        self.prediction_thread = None
        self.monitoring_thread = None
        
        # Datos y predicciones
        self.current_predictions: Dict[str, Dict[str, Any]] = {}
        self.prediction_history: List[Dict[str, Any]] = []
        self.last_signals: Dict[str, TradeSignal] = {}
        
        # Callbacks y eventos
        self.signal_callbacks: List[Callable] = []
        self.trade_callbacks: List[Callable] = []
        self.error_callbacks: List[Callable] = []
        
        # Estad√≠sticas
        self.stats = {
            'start_time': None,
            'predictions_made': 0,
            'signals_generated': 0,
            'trades_executed': 0,
            'successful_trades': 0,
            'total_profit': 0.0,
            'uptime_hours': 0.0
        }
        
        # Configuraci√≥n de filtros
        self.filters = {
            'min_confidence': min_confidence,
            'max_spread': max_spread,
            'min_volume': 0.01,
            'max_correlation': 0.8,
            'trading_hours': None,  # None = 24/7
            'news_filter': False
        }
        
        log.info(f"TradingBot inicializado")
        log.info(f"  Modelo: {model_path}")
        log.info(f"  S√≠mbolos: {self.symbols}")
        log.info(f"  Timeframe: {timeframe}")
        log.info(f"  Intervalo: {prediction_interval}s")
        log.info(f"  Trading: {'‚úÖ HABILITADO' if trading_enabled else '‚ùå DESHABILITADO'}")
        log.info(f"  Confianza m√≠nima: {min_confidence}")
    
    def initialize(self) -> bool:
        """
        Inicializa el bot de trading.
        
        Returns:
            bool: True si se inicializ√≥ correctamente
        """
        try:
            log.info("üöÄ Inicializando TradingBot...")
            
            # 1. Cargar modelo predictor
            log.info("üìä Cargando modelo predictor...")
            if not self.predictor.load_model():
                log.error("‚ùå No se pudo cargar el modelo")
                return False
            
            log.info("‚úÖ Modelo cargado exitosamente")
            
            # 2. Conectar executor (solo si trading est√° habilitado)
            if self.trading_enabled:
                log.info("üîå Conectando executor de trading...")
                if not self.executor.connect():
                    log.error("‚ùå No se pudo conectar el executor")
                    return False
                
                log.info("‚úÖ Executor conectado exitosamente")
                
                # Mostrar informaci√≥n de la cuenta
                account_info = self.executor.get_account_summary()
                if account_info:
                    log.info(f"üí∞ Cuenta: {account_info['login']}")
                    log.info(f"üí∞ Balance: {account_info['balance']:.2f} {account_info['currency']}")
                    log.info(f"üí∞ Equity: {account_info['equity']:.2f} {account_info['currency']}")
            else:
                log.info("üìä Modo an√°lisis - Trading deshabilitado")
            
            # 3. Verificar s√≠mbolos
            log.info("üîç Verificando s√≠mbolos...")
            valid_symbols = self._verify_symbols()
            if not valid_symbols:
                log.error("‚ùå No hay s√≠mbolos v√°lidos")
                return False
            
            self.symbols = valid_symbols
            log.info(f"‚úÖ S√≠mbolos v√°lidos: {self.symbols}")
            
            # 4. Configurar manejadores de se√±ales
            self._setup_signal_handlers()
            
            log.info("‚úÖ TradingBot inicializado correctamente")
            return True
            
        except Exception as e:
            log.error(f"‚ùå Error inicializando bot: {str(e)}")
            return False
    
    def start(self) -> bool:
        """
        Inicia el bot de trading.
        
        Returns:
            bool: True si se inici√≥ correctamente
        """
        if self.running:
            log.warning("‚ö†Ô∏è El bot ya est√° ejecut√°ndose")
            return True
        
        if not self.initialize():
            return False
        
        try:
            self.running = True
            self.stats['start_time'] = datetime.now()
            
            # Iniciar hilo de predicciones
            self.prediction_thread = threading.Thread(
                target=self._prediction_loop,
                name="PredictionThread",
                daemon=True
            )
            self.prediction_thread.start()
            
            # Iniciar hilo de monitoreo
            self.monitoring_thread = threading.Thread(
                target=self._monitoring_loop,
                name="MonitoringThread",
                daemon=True
            )
            self.monitoring_thread.start()
            
            log.info("üéØ TradingBot iniciado exitosamente")
            log.info(f"  Modo: {'TRADING REAL' if self.trading_enabled else 'AN√ÅLISIS'}")
            log.info(f"  S√≠mbolos: {len(self.symbols)}")
            log.info(f"  Intervalo: {self.prediction_interval}s")
            
            return True
            
        except Exception as e:
            log.error(f"‚ùå Error iniciando bot: {str(e)}")
            self.running = False
            return False
    
    def stop(self, emergency: bool = False):
        """
        Detiene el bot de trading.
        
        Args:
            emergency: Si es una parada de emergencia
        """
        if emergency:
            log.warning("üö® PARADA DE EMERGENCIA ACTIVADA")
            self.emergency_stop_triggered = True
            
            # Cerrar todas las posiciones si trading est√° habilitado
            if self.trading_enabled and self.executor.connected:
                self.executor.emergency_stop()
        
        self.running = False
        self.paused = False
        
        # Esperar a que terminen los hilos
        if self.prediction_thread and self.prediction_thread.is_alive():
            self.prediction_thread.join(timeout=10)
        
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            self.monitoring_thread.join(timeout=10)
        
        # Desconectar executor
        if self.trading_enabled:
            self.executor.disconnect()
        
        # Mostrar estad√≠sticas finales
        self._print_final_stats()
        
        log.info("üõë TradingBot detenido")
    
    def pause(self):
        """Pausa el bot (detiene nuevas operaciones pero mantiene monitoreo)."""
        self.paused = True
        log.info("‚è∏Ô∏è TradingBot pausado")
    
    def resume(self):
        """Reanuda el bot."""
        self.paused = False
        log.info("‚ñ∂Ô∏è TradingBot reanudado")
    
    def _prediction_loop(self):
        """Loop principal de predicciones."""
        log.info("üîÑ Iniciando loop de predicciones...")
        
        while self.running:
            try:
                if self.paused:
                    time.sleep(10)
                    continue
                
                start_time = time.time()
                
                # Realizar predicciones para todos los s√≠mbolos
                predictions = self._make_predictions_all_symbols()
                
                # Procesar predicciones
                if predictions:
                    self._process_predictions(predictions)
                
                # Calcular tiempo de ejecuci√≥n
                execution_time = time.time() - start_time
                
                # Esperar hasta el pr√≥ximo ciclo
                sleep_time = max(0, self.prediction_interval - execution_time)
                if sleep_time > 0:
                    time.sleep(sleep_time)
                
            except Exception as e:
                log.error(f"‚ùå Error en loop de predicciones: {str(e)}")
                self._execute_error_callbacks(e)
                time.sleep(30)  # Esperar antes de reintentar
    
    def _monitoring_loop(self):
        """Loop de monitoreo del sistema."""
        log.info("üëÅÔ∏è Iniciando loop de monitoreo...")
        
        while self.running:
            try:
                # Actualizar estad√≠sticas
                self._update_stats()
                
                # Verificar conexiones
                if self.trading_enabled:
                    if not self._check_connections():
                        log.warning("‚ö†Ô∏è Problemas de conexi√≥n detectados")
                
                # Imprimir estad√≠sticas cada 10 minutos
                if self.stats['predictions_made'] % 20 == 0 and self.stats['predictions_made'] > 0:
                    self._print_current_stats()
                
                time.sleep(60)  # Monitoreo cada minuto
                
            except Exception as e:
                log.error(f"‚ùå Error en loop de monitoreo: {str(e)}")
                time.sleep(60)
    
    def _make_predictions_all_symbols(self) -> Dict[str, Dict[str, Any]]:
        """
        Realiza predicciones para todos los s√≠mbolos.
        
        Returns:
            Dict[str, Dict[str, Any]]: Predicciones por s√≠mbolo
        """
        predictions = {}
        
        for symbol in self.symbols:
            try:
                # Obtener datos
                data = self.data_loader.load_data(
                    symbol=symbol,
                    timeframe=self.timeframe,
                    periods=100
                )
                
                if data.empty or len(data) < 50:
                    log.warning(f"‚ö†Ô∏è Datos insuficientes para {symbol}")
                    continue
                
                # Realizar predicci√≥n
                prediction = self.predictor.predict_single(data)
                
                # Agregar informaci√≥n adicional
                prediction['symbol'] = symbol
                prediction['last_price'] = float(data['close'].iloc[-1])
                prediction['data_timestamp'] = data.index[-1].isoformat() if hasattr(data.index[-1], 'isoformat') else str(data.index[-1])
                
                # Obtener spread si trading est√° habilitado
                if self.trading_enabled and self.executor.connected:
                    spread = self._get_spread(symbol)
                    prediction['spread'] = spread
                
                predictions[symbol] = prediction
                self.stats['predictions_made'] += 1
                
                log.debug(f"üìä {symbol}: {prediction['signal']} (conf: {prediction.get('confidence', 0):.3f})")
                
            except Exception as e:
                log.error(f"‚ùå Error predicci√≥n {symbol}: {str(e)}")
                continue
        
        return predictions
    
    def _process_predictions(self, predictions: Dict[str, Dict[str, Any]]):
        """
        Procesa las predicciones y genera se√±ales de trading.
        
        Args:
            predictions: Diccionario de predicciones por s√≠mbolo
        """
        for symbol, prediction in predictions.items():
            try:
                # Guardar predicci√≥n
                self.current_predictions[symbol] = prediction
                self.prediction_history.append(prediction)
                
                # Mantener solo las √∫ltimas 1000 predicciones
                if len(self.prediction_history) > 1000:
                    self.prediction_history = self.prediction_history[-1000:]
                
                # Verificar si generar se√±al de trading
                if self._should_generate_signal(prediction):
                    signal = self._create_trading_signal(prediction)
                    
                    if signal:
                        self._handle_trading_signal(signal)
                
                # Ejecutar callbacks de se√±al
                self._execute_signal_callbacks(symbol, prediction)
                
            except Exception as e:
                log.error(f"‚ùå Error procesando predicci√≥n {symbol}: {str(e)}")
    
    def _should_generate_signal(self, prediction: Dict[str, Any]) -> bool:
        """
        Determina si se debe generar una se√±al de trading.
        
        Args:
            prediction: Predicci√≥n del modelo
            
        Returns:
            bool: True si se debe generar se√±al
        """
        # Filtro b√°sico: no generar se√±ales HOLD
        if prediction['signal'] == 'hold':
            return False
        
        # Filtro de confianza
        if prediction.get('confidence', 0) < self.filters['min_confidence']:
            return False
        
        # Filtro de spread (si est√° disponible)
        if 'spread' in prediction and prediction['spread'] > self.filters['max_spread']:
            return False
        
        # Filtro de horario de trading (si est√° configurado)
        if self.filters['trading_hours']:
            current_hour = datetime.now().hour
            if current_hour not in self.filters['trading_hours']:
                return False
        
        return True
    
    def _create_trading_signal(self, prediction: Dict[str, Any]) -> Optional[TradeSignal]:
        """
        Crea una se√±al de trading a partir de una predicci√≥n.
        
        Args:
            prediction: Predicci√≥n del modelo
            
        Returns:
            Optional[TradeSignal]: Se√±al de trading o None
        """
        try:
            signal = TradeSignal(
                symbol=prediction['symbol'],
                signal=prediction['signal'],
                confidence=prediction.get('confidence', 0),
                price=prediction.get('last_price', 0),
                timestamp=datetime.now(),
                probabilities=prediction.get('probabilities', {}),
                metadata={
                    'model_prediction': prediction.get('prediction_raw'),
                    'data_timestamp': prediction.get('data_timestamp'),
                    'spread': prediction.get('spread', 0)
                }
            )
            
            return signal
            
        except Exception as e:
            log.error(f"‚ùå Error creando se√±al: {str(e)}")
            return None
    
    def _handle_trading_signal(self, signal: TradeSignal):
        """
        Maneja una se√±al de trading.
        
        Args:
            signal: Se√±al de trading
        """
        try:
            log.info(f"üéØ Nueva se√±al: {signal.symbol} {signal.signal.upper()}")
            log.info(f"  Confianza: {signal.confidence:.3f}")
            log.info(f"  Precio: {signal.price:.5f}")
            
            # Guardar se√±al
            self.last_signals[signal.symbol] = signal
            self.stats['signals_generated'] += 1
            
            # Ejecutar trading si est√° habilitado
            if self.trading_enabled and not self.paused:
                order = self.executor.execute_signal(signal)
                
                if order:
                    self.stats['trades_executed'] += 1
                    log.info(f"‚úÖ Operaci√≥n ejecutada: {order.ticket}")
                    
                    # Ejecutar callbacks de trading
                    self._execute_trade_callbacks(signal, order)
                else:
                    log.warning(f"‚ö†Ô∏è No se pudo ejecutar operaci√≥n para {signal.symbol}")
            else:
                log.info("üìä Modo an√°lisis - Se√±al registrada pero no ejecutada")
            
        except Exception as e:
            log.error(f"‚ùå Error manejando se√±al: {str(e)}")
            self._execute_error_callbacks(e)
    
    def _verify_symbols(self) -> List[str]:
        """
        Verifica que los s√≠mbolos sean v√°lidos.
        
        Returns:
            List[str]: Lista de s√≠mbolos v√°lidos
        """
        valid_symbols = []
        
        for symbol in self.symbols:
            try:
                # Intentar obtener datos
                data = self.data_loader.load_data(symbol=symbol, timeframe=self.timeframe, periods=10)
                
                if not data.empty:
                    valid_symbols.append(symbol)
                    log.debug(f"‚úÖ S√≠mbolo v√°lido: {symbol}")
                else:
                    log.warning(f"‚ö†Ô∏è S√≠mbolo sin datos: {symbol}")
                    
            except Exception as e:
                log.warning(f"‚ö†Ô∏è Error verificando {symbol}: {str(e)}")
        
        return valid_symbols
    
    def _get_spread(self, symbol: str) -> float:
        """
        Obtiene el spread actual del s√≠mbolo.
        
        Args:
            symbol: S√≠mbolo a consultar
            
        Returns:
            float: Spread en puntos
        """
        try:
            if self.trading_enabled and self.executor.connected:
                import MetaTrader5 as mt5
                symbol_info = mt5.symbol_info(symbol)
                if symbol_info:
                    return symbol_info.spread
            return 0.0
        except:
            return 0.0
    
    def _check_connections(self) -> bool:
        """
        Verifica el estado de las conexiones.
        
        Returns:
            bool: True si todas las conexiones est√°n OK
        """
        try:
            if self.trading_enabled:
                # Verificar conexi√≥n MT5
                if not self.executor.connected:
                    log.warning("‚ö†Ô∏è Conexi√≥n MT5 perdida, reintentando...")
                    return self.executor.connect()
            
            return True
            
        except Exception as e:
            log.error(f"‚ùå Error verificando conexiones: {str(e)}")
            return False
    
    def _update_stats(self):
        """Actualiza las estad√≠sticas del bot."""
        if self.stats['start_time']:
            self.stats['uptime_hours'] = (datetime.now() - self.stats['start_time']).total_seconds() / 3600
    
    def _print_current_stats(self):
        """Imprime estad√≠sticas actuales."""
        log.info("üìà ESTAD√çSTICAS ACTUALES:")
        log.info(f"  Tiempo activo: {self.stats['uptime_hours']:.1f} horas")
        log.info(f"  Predicciones: {self.stats['predictions_made']}")
        log.info(f"  Se√±ales generadas: {self.stats['signals_generated']}")
        log.info(f"  Operaciones ejecutadas: {self.stats['trades_executed']}")
        
        if self.trading_enabled:
            account_summary = self.executor.get_account_summary()
            if account_summary:
                log.info(f"  Balance: {account_summary.get('balance', 0):.2f}")
                log.info(f"  Posiciones abiertas: {account_summary.get('open_positions', 0)}")
    
    def _print_final_stats(self):
        """Imprime estad√≠sticas finales."""
        log.info("üìä ESTAD√çSTICAS FINALES:")
        log.info(f"  Duraci√≥n total: {self.stats['uptime_hours']:.1f} horas")
        log.info(f"  Predicciones totales: {self.stats['predictions_made']}")
        log.info(f"  Se√±ales generadas: {self.stats['signals_generated']}")
        log.info(f"  Operaciones ejecutadas: {self.stats['trades_executed']}")
        
        if self.stats['signals_generated'] > 0:
            execution_rate = (self.stats['trades_executed'] / self.stats['signals_generated']) * 100
            log.info(f"  Tasa de ejecuci√≥n: {execution_rate:.1f}%")
    
    def _setup_signal_handlers(self):
        """Configura manejadores de se√±ales del sistema."""
        def signal_handler(signum, frame):
            log.info(f"üõë Se√±al recibida: {signum}")
            self.stop(emergency=True)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    # M√©todos para callbacks
    
    def add_signal_callback(self, callback: Callable):
        """Agrega callback para se√±ales generadas."""
        self.signal_callbacks.append(callback)
    
    def add_trade_callback(self, callback: Callable):
        """Agrega callback para operaciones ejecutadas."""
        self.trade_callbacks.append(callback)
    
    def add_error_callback(self, callback: Callable):
        """Agrega callback para errores."""
        self.error_callbacks.append(callback)
    
    def _execute_signal_callbacks(self, symbol: str, prediction: Dict[str, Any]):
        """Ejecuta callbacks de se√±ales."""
        for callback in self.signal_callbacks:
            try:
                callback(symbol, prediction)
            except Exception as e:
                log.error(f"‚ùå Error en callback de se√±al: {str(e)}")
    
    def _execute_trade_callbacks(self, signal: TradeSignal, order):
        """Ejecuta callbacks de trading."""
        for callback in self.trade_callbacks:
            try:
                callback(signal, order)
            except Exception as e:
                log.error(f"‚ùå Error en callback de trading: {str(e)}")
    
    def _execute_error_callbacks(self, error: Exception):
        """Ejecuta callbacks de errores."""
        for callback in self.error_callbacks:
            try:
                callback(error)
            except Exception as e:
                log.error(f"‚ùå Error en callback de error: {str(e)}")
    
    # M√©todos de consulta
    
    def get_current_predictions(self) -> Dict[str, Dict[str, Any]]:
        """Obtiene las predicciones actuales."""
        return self.current_predictions.copy()
    
    def get_last_signals(self) -> Dict[str, TradeSignal]:
        """Obtiene las √∫ltimas se√±ales generadas."""
        return self.last_signals.copy()
    
    def get_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas del bot."""
        return self.stats.copy()
    
    def get_account_summary(self) -> Dict[str, Any]:
        """Obtiene resumen de la cuenta."""
        if self.trading_enabled:
            return self.executor.get_account_summary()
        return {}
    
    def is_running(self) -> bool:
        """Verifica si el bot est√° ejecut√°ndose."""
        return self.running
    
    def is_paused(self) -> bool:
        """Verifica si el bot est√° pausado."""
        return self.paused


# Funciones de utilidad

def create_trading_bot(model_path: str = "models/lit_ml_model.pkl",
                      symbols: List[str] = None,
                      risk_level: str = "moderate",
                      trading_enabled: bool = False) -> TradingBot:
    """
    Crea un bot de trading con configuraci√≥n predeterminada.
    
    Args:
        model_path: Ruta al modelo entrenado
        symbols: Lista de s√≠mbolos a operar
        risk_level: Nivel de riesgo
        trading_enabled: Si habilitar trading real
        
    Returns:
        TradingBot: Instancia configurada
    """
    return TradingBot(
        model_path=model_path,
        symbols=symbols or ['EURUSD', 'GBPUSD', 'USDJPY'],
        risk_level=risk_level,
        trading_enabled=trading_enabled
    )


def run_trading_bot(duration_hours: int = 24,
                   model_path: str = "models/lit_ml_model.pkl",
                   trading_enabled: bool = False) -> bool:
    """
    Ejecuta el bot de trading por un per√≠odo determinado.
    
    Args:
        duration_hours: Duraci√≥n en horas
        model_path: Ruta al modelo
        trading_enabled: Si habilitar trading real
        
    Returns:
        bool: True si se ejecut√≥ correctamente
    """
    bot = create_trading_bot(model_path, trading_enabled=trading_enabled)
    
    try:
        if not bot.start():
            return False
        
        log.info(f"üïê Ejecutando por {duration_hours} horas...")
        time.sleep(duration_hours * 3600)
        
        return True
        
    except KeyboardInterrupt:
        log.info("‚èπÔ∏è Detenido por el usuario")
        return True
        
    except Exception as e:
        log.error(f"‚ùå Error en ejecuci√≥n: {str(e)}")
        return False
        
    finally:
        bot.stop() 