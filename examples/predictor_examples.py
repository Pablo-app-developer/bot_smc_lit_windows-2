#!/usr/bin/env python3
"""
Ejemplos de Uso del Predictor LIT + ML.

Este archivo contiene ejemplos pr√°cticos de c√≥mo usar el sistema
de predicciones LIT + ML en diferentes escenarios.
"""

import os
import sys
from pathlib import Path
from datetime import datetime, timedelta

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

from src.models.predictor import LITMLPredictor, load_and_predict, batch_predict_for_backtesting
from src.integrations.mt5_predictor import create_mt5_predictor
from src.data.data_loader import DataLoader
from src.utils.logger import log


def ejemplo_prediccion_simple():
    """
    Ejemplo 1: Predicci√≥n simple para un s√≠mbolo.
    
    Muestra c√≥mo realizar una predicci√≥n b√°sica usando datos hist√≥ricos.
    """
    print("="*60)
    print("üìä EJEMPLO 1: PREDICCI√ìN SIMPLE")
    print("="*60)
    
    try:
        # Configuraci√≥n
        model_path = "models/test_model.pkl"  # Usar el modelo de prueba
        symbol = "AAPL"
        
        # Verificar que el modelo existe
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo no encontrado: {model_path}")
            print("Ejecuta primero: python scripts/train_model.py")
            return
        
        # Crear predictor
        predictor = LITMLPredictor(model_path)
        
        # Cargar modelo
        print("üîÑ Cargando modelo...")
        if not predictor.load_model():
            print("‚ùå Error cargando modelo")
            return
        
        # Obtener datos
        print(f"üìà Obteniendo datos para {symbol}...")
        data_loader = DataLoader()
        data = data_loader.load_data(symbol=symbol, timeframe="1d", periods=100)
        
        if data.empty:
            print(f"‚ùå No se pudieron obtener datos para {symbol}")
            return
        
        print(f"‚úÖ Datos obtenidos: {len(data)} velas")
        
        # Realizar predicci√≥n
        print("üéØ Realizando predicci√≥n...")
        prediction = predictor.predict_single(data)
        
        # Mostrar resultado
        print("\nüìä RESULTADO:")
        print(f"  S√≠mbolo: {symbol}")
        print(f"  Se√±al: {prediction['signal'].upper()}")
        print(f"  Confianza: {prediction.get('confidence', 0):.3f}")
        print(f"  Precio actual: {data['close'].iloc[-1]:.2f}")
        
        if 'probabilities' in prediction:
            probs = prediction['probabilities']
            print(f"  Probabilidades:")
            print(f"    Compra: {probs.get('buy', 0):.3f}")
            print(f"    Venta: {probs.get('sell', 0):.3f}")
            print(f"    Mantener: {probs.get('hold', 0):.3f}")
        
        print("‚úÖ Predicci√≥n completada")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")


def ejemplo_backtesting_basico():
    """
    Ejemplo 2: Backtesting b√°sico.
    
    Muestra c√≥mo realizar backtesting con datos hist√≥ricos.
    """
    print("\n" + "="*60)
    print("üìà EJEMPLO 2: BACKTESTING B√ÅSICO")
    print("="*60)
    
    try:
        # Configuraci√≥n
        model_path = "models/test_model.pkl"
        symbol = "AAPL"
        days = 30
        
        # Verificar modelo
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo no encontrado: {model_path}")
            return
        
        # Obtener datos hist√≥ricos
        print(f"üìä Obteniendo {days} d√≠as de datos para {symbol}...")
        data_loader = DataLoader()
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        data = data_loader.load_data(
            symbol=symbol,
            timeframe="1d",
            start_date=start_date,
            end_date=end_date
        )
        
        if data.empty:
            print(f"‚ùå No se pudieron obtener datos para {symbol}")
            return
        
        print(f"‚úÖ Datos obtenidos: {len(data)} velas")
        
        # Ejecutar backtesting
        print("üîÑ Ejecutando backtesting...")
        predictions_df = batch_predict_for_backtesting(model_path, data, window_size=20)
        
        if predictions_df.empty:
            print("‚ùå No se pudieron generar predicciones")
            return
        
        print(f"‚úÖ Predicciones generadas: {len(predictions_df)}")
        
        # An√°lisis b√°sico
        signal_counts = predictions_df['signal'].value_counts()
        avg_confidence = predictions_df['confidence'].mean()
        
        print("\nüìä RESULTADOS DEL BACKTESTING:")
        print(f"  Total predicciones: {len(predictions_df)}")
        print(f"  Confianza promedio: {avg_confidence:.3f}")
        print(f"  Distribuci√≥n de se√±ales:")
        for signal, count in signal_counts.items():
            percentage = (count / len(predictions_df)) * 100
            print(f"    {signal.upper()}: {count} ({percentage:.1f}%)")
        
        # Predicciones de alta confianza
        high_conf = predictions_df[predictions_df['confidence'] > 0.7]
        print(f"  Alta confianza (>0.7): {len(high_conf)} ({len(high_conf)/len(predictions_df)*100:.1f}%)")
        
        print("‚úÖ Backtesting completado")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")


def ejemplo_prediccion_multiple():
    """
    Ejemplo 3: Predicciones m√∫ltiples para varios s√≠mbolos.
    
    Muestra c√≥mo realizar predicciones para m√∫ltiples s√≠mbolos.
    """
    print("\n" + "="*60)
    print("üéØ EJEMPLO 3: PREDICCIONES M√öLTIPLES")
    print("="*60)
    
    try:
        # Configuraci√≥n
        model_path = "models/test_model.pkl"
        symbols = ["AAPL", "MSFT", "GOOGL", "TSLA"]
        
        # Verificar modelo
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo no encontrado: {model_path}")
            return
        
        # Crear predictor
        predictor = LITMLPredictor(model_path)
        if not predictor.load_model():
            print("‚ùå Error cargando modelo")
            return
        
        print("‚úÖ Modelo cargado")
        
        # Realizar predicciones para cada s√≠mbolo
        results = {}
        data_loader = DataLoader()
        
        for symbol in symbols:
            try:
                print(f"üîÑ Procesando {symbol}...")
                
                # Obtener datos
                data = data_loader.load_data(symbol=symbol, timeframe="1d", periods=100)
                
                if data.empty:
                    print(f"  ‚ö†Ô∏è Sin datos para {symbol}")
                    continue
                
                # Realizar predicci√≥n
                prediction = predictor.predict_single(data)
                
                # Guardar resultado
                results[symbol] = {
                    'signal': prediction['signal'],
                    'confidence': prediction.get('confidence', 0),
                    'price': data['close'].iloc[-1],
                    'probabilities': prediction.get('probabilities', {})
                }
                
                print(f"  ‚úÖ {symbol}: {prediction['signal']} (conf: {prediction.get('confidence', 0):.3f})")
                
            except Exception as e:
                print(f"  ‚ùå Error con {symbol}: {str(e)}")
                continue
        
        # Mostrar resumen
        if results:
            print("\nüìä RESUMEN DE PREDICCIONES:")
            print("-" * 60)
            print(f"{'S√≠mbolo':<8} {'Se√±al':<8} {'Confianza':<10} {'Precio':<10}")
            print("-" * 60)
            
            for symbol, result in results.items():
                print(f"{symbol:<8} {result['signal'].upper():<8} {result['confidence']:<10.3f} {result['price']:<10.2f}")
            
            # Estad√≠sticas
            signals = [r['signal'] for r in results.values()]
            confidences = [r['confidence'] for r in results.values()]
            
            print(f"\nüìà ESTAD√çSTICAS:")
            print(f"  S√≠mbolos procesados: {len(results)}")
            print(f"  Confianza promedio: {sum(confidences)/len(confidences):.3f}")
            print(f"  Se√±ales BUY: {signals.count('buy')}")
            print(f"  Se√±ales SELL: {signals.count('sell')}")
            print(f"  Se√±ales HOLD: {signals.count('hold')}")
        
        print("‚úÖ Predicciones m√∫ltiples completadas")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")


def ejemplo_uso_funciones_utilidad():
    """
    Ejemplo 4: Uso de funciones de utilidad.
    
    Muestra c√≥mo usar las funciones de utilidad para casos simples.
    """
    print("\n" + "="*60)
    print("üõ†Ô∏è EJEMPLO 4: FUNCIONES DE UTILIDAD")
    print("="*60)
    
    try:
        # Configuraci√≥n
        model_path = "models/test_model.pkl"
        symbol = "AAPL"
        
        # Verificar modelo
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo no encontrado: {model_path}")
            return
        
        # Obtener datos
        print(f"üìä Obteniendo datos para {symbol}...")
        data_loader = DataLoader()
        data = data_loader.load_data(symbol=symbol, timeframe="1d", periods=100)
        
        if data.empty:
            print(f"‚ùå No se pudieron obtener datos para {symbol}")
            return
        
        # Usar funci√≥n de utilidad para predicci√≥n r√°pida
        print("üéØ Usando funci√≥n de utilidad load_and_predict()...")
        prediction = load_and_predict(model_path, data)
        
        print(f"‚úÖ Predicci√≥n r√°pida:")
        print(f"  Se√±al: {prediction['signal']}")
        print(f"  Confianza: {prediction.get('confidence', 0):.3f}")
        
        # Ejemplo de informaci√≥n del modelo
        predictor = LITMLPredictor(model_path)
        if predictor.load_model():
            model_info = predictor.get_model_info()
            
            print(f"\nüìã INFORMACI√ìN DEL MODELO:")
            print(f"  Estado: {model_info['status']}")
            print(f"  Tipo: {model_info['model_type']}")
            print(f"  Caracter√≠sticas: {model_info['features_count']}")
            print(f"  Predicciones realizadas: {model_info['predictions_made']}")
        
        print("‚úÖ Funciones de utilidad demostradas")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")


def ejemplo_mt5_demo():
    """
    Ejemplo 5: Demo de integraci√≥n MT5 (sin trading real).
    
    Muestra c√≥mo configurar la integraci√≥n MT5 sin ejecutar operaciones.
    """
    print("\n" + "="*60)
    print("üîå EJEMPLO 5: DEMO INTEGRACI√ìN MT5")
    print("="*60)
    
    try:
        # Configuraci√≥n
        model_path = "models/test_model.pkl"
        
        # Verificar modelo
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo no encontrado: {model_path}")
            return
        
        print("üîÑ Creando integrador MT5...")
        
        # Crear integrador (sin inicializar MT5 real)
        integrator = create_mt5_predictor(model_path)
        
        print("‚úÖ Integrador MT5 creado")
        print(f"  Login configurado: {integrator.login}")
        print(f"  Servidor: {integrator.server}")
        print(f"  S√≠mbolos: {integrator.symbols}")
        print(f"  Intervalo predicci√≥n: {integrator.prediction_interval}s")
        
        # Mostrar configuraci√≥n
        print(f"\n‚öôÔ∏è CONFIGURACI√ìN:")
        print(f"  Modelo: {integrator.model_path}")
        print(f"  Trading habilitado: {integrator.trading_enabled}")
        print(f"  Riesgo por operaci√≥n: {integrator.risk_per_trade * 100}%")
        
        # Nota sobre uso real
        print(f"\nüìù NOTA:")
        print(f"  Para usar MT5 real, ejecuta:")
        print(f"  python scripts/run_predictions.py realtime --hours 1")
        print(f"  (Requiere MetaTrader 5 instalado y configurado)")
        
        print("‚úÖ Demo MT5 completada")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")


def main():
    """Ejecuta todos los ejemplos."""
    print("üöÄ EJEMPLOS DE USO DEL PREDICTOR LIT + ML")
    print("=" * 80)
    
    # Ejecutar ejemplos
    ejemplo_prediccion_simple()
    ejemplo_backtesting_basico()
    ejemplo_prediccion_multiple()
    ejemplo_uso_funciones_utilidad()
    ejemplo_mt5_demo()
    
    print("\n" + "="*80)
    print("‚úÖ TODOS LOS EJEMPLOS COMPLETADOS")
    print("="*80)
    
    print("\nüìö PR√ìXIMOS PASOS:")
    print("1. Entrena tu propio modelo: python scripts/train_model.py")
    print("2. Ejecuta predicciones: python scripts/run_predictions.py single --symbol AAPL")
    print("3. Prueba backtesting: python scripts/run_predictions.py backtest --symbol AAPL --days 30")
    print("4. Configura MT5 para trading real")


if __name__ == "__main__":
    main() 