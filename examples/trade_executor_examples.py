#!/usr/bin/env python3
"""
Ejemplos de uso del Trade Executor.

Este archivo contiene ejemplos pr√°cticos de c√≥mo usar el ejecutor
de operaciones de trading con diferentes configuraciones.
"""

import sys
import time
from datetime import datetime
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

from src.trading.trade_executor import (
    TradeExecutor, TradeSignal, RiskLevel, 
    create_trade_executor, execute_signal_simple
)
from src.utils.logger import log


def ejemplo_basico():
    """Ejemplo b√°sico de uso del ejecutor."""
    print("=" * 60)
    print("EJEMPLO 1: USO B√ÅSICO DEL TRADE EXECUTOR")
    print("=" * 60)
    
    # Crear ejecutor con configuraci√≥n por defecto
    executor = create_trade_executor(risk_level="moderate")
    
    try:
        # Conectar
        if not executor.connect():
            print("‚ùå No se pudo conectar")
            return
        
        # Mostrar informaci√≥n de la cuenta
        account_info = executor.get_account_summary()
        print(f"‚úÖ Conectado a cuenta: {account_info['login']}")
        print(f"üí∞ Balance: {account_info['balance']:.2f} {account_info['currency']}")
        print(f"üìä Equity: {account_info['equity']:.2f}")
        
        # Crear se√±al de ejemplo
        signal = TradeSignal(
            symbol="EURUSD",
            signal="buy",
            confidence=0.75,
            price=1.0850,
            probabilities={'buy': 0.75, 'sell': 0.15, 'hold': 0.10}
        )
        
        print(f"\nüéØ Ejecutando se√±al: {signal.symbol} {signal.signal.upper()}")
        print(f"   Confianza: {signal.confidence:.3f}")
        
        # Ejecutar se√±al
        order = executor.execute_signal(signal)
        
        if order:
            print(f"‚úÖ Orden ejecutada: Ticket #{order.ticket}")
            print(f"   Precio: {order.fill_price:.5f}")
            print(f"   Volumen: {order.volume}")
            print(f"   SL: {order.stop_loss:.5f}")
            print(f"   TP: {order.take_profit:.5f}")
        else:
            print("‚ùå No se pudo ejecutar la orden")
        
    finally:
        executor.disconnect()


def ejemplo_multiples_se√±ales():
    """Ejemplo con m√∫ltiples se√±ales."""
    print("\n" + "=" * 60)
    print("EJEMPLO 2: M√öLTIPLES SE√ëALES")
    print("=" * 60)
    
    # Se√±ales de ejemplo
    se√±ales = [
        {
            'symbol': 'EURUSD',
            'signal': 'buy',
            'confidence': 0.72,
            'price': 1.0850
        },
        {
            'symbol': 'GBPUSD',
            'signal': 'sell',
            'confidence': 0.68,
            'price': 1.2650
        },
        {
            'symbol': 'USDJPY',
            'signal': 'buy',
            'confidence': 0.80,
            'price': 149.50
        },
        {
            'symbol': 'AUDUSD',
            'signal': 'hold',  # Esta no se ejecutar√°
            'confidence': 0.55,
            'price': 0.6750
        }
    ]
    
    with create_trade_executor("moderate") as executor:
        print(f"‚úÖ Conectado - Balance: {executor.get_account_summary()['balance']:.2f}")
        
        for i, se√±al_data in enumerate(se√±ales, 1):
            print(f"\nüìä Procesando se√±al {i}/4: {se√±al_data['symbol']}")
            
            # Crear se√±al
            signal = TradeSignal(
                symbol=se√±al_data['symbol'],
                signal=se√±al_data['signal'],
                confidence=se√±al_data['confidence'],
                price=se√±al_data['price']
            )
            
            # Ejecutar
            order = executor.execute_signal(signal)
            
            if order:
                print(f"   ‚úÖ Ejecutada: Ticket #{order.ticket}")
            else:
                print(f"   ‚ùå No ejecutada")
            
            # Pausa entre √≥rdenes
            time.sleep(2)
        
        # Mostrar resumen final
        account_info = executor.get_account_summary()
        print(f"\nüìà RESUMEN FINAL:")
        print(f"   √ìrdenes enviadas: {account_info['orders_sent']}")
        print(f"   √ìrdenes ejecutadas: {account_info['orders_filled']}")
        print(f"   √ìrdenes rechazadas: {account_info['orders_rejected']}")
        print(f"   Posiciones abiertas: {account_info['open_positions']}")


def ejemplo_niveles_riesgo():
    """Ejemplo comparando diferentes niveles de riesgo."""
    print("\n" + "=" * 60)
    print("EJEMPLO 3: NIVELES DE RIESGO")
    print("=" * 60)
    
    # Se√±al de prueba
    test_signal = TradeSignal(
        symbol="EURUSD",
        signal="buy",
        confidence=0.70,
        price=1.0850
    )
    
    risk_levels = ['conservative', 'moderate', 'aggressive']
    
    for risk_level in risk_levels:
        print(f"\nüéØ Probando nivel: {risk_level.upper()}")
        
        with create_trade_executor(risk_level) as executor:
            # Mostrar configuraci√≥n de riesgo
            risk_config = executor.risk_manager.config
            print(f"   Riesgo por operaci√≥n: {risk_config['risk_per_trade']*100}%")
            print(f"   Stop Loss: {risk_config['sl_points']} puntos")
            print(f"   Take Profit: {risk_config['tp_points']} puntos")
            print(f"   Confianza m√≠nima: {risk_config['min_confidence']}")
            
            # Verificar si se puede ejecutar
            can_open, reason = executor.risk_manager.can_open_position(
                test_signal, executor.account_info.balance
            )
            
            if can_open:
                print(f"   ‚úÖ Se√±al ACEPTADA")
                
                # Calcular tama√±o de posici√≥n
                position_size = executor.risk_manager.calculate_position_size(
                    test_signal.symbol, executor.account_info.balance
                )
                print(f"   üìä Tama√±o calculado: {position_size} lotes")
            else:
                print(f"   ‚ùå Se√±al RECHAZADA: {reason}")


def ejemplo_gestion_posiciones():
    """Ejemplo de gesti√≥n de posiciones."""
    print("\n" + "=" * 60)
    print("EJEMPLO 4: GESTI√ìN DE POSICIONES")
    print("=" * 60)
    
    with create_trade_executor("moderate") as executor:
        # Abrir algunas posiciones
        signals = [
            TradeSignal("EURUSD", "buy", 0.75, 1.0850),
            TradeSignal("GBPUSD", "sell", 0.70, 1.2650)
        ]
        
        orders = []
        for signal in signals:
            order = executor.execute_signal(signal)
            if order:
                orders.append(order)
                print(f"‚úÖ Posici√≥n abierta: {order.symbol} - Ticket #{order.ticket}")
        
        if orders:
            print(f"\nüìä Posiciones abiertas: {len(orders)}")
            
            # Mostrar posiciones
            positions = executor.get_open_positions()
            for pos in positions:
                print(f"   {pos['symbol']}: {pos['type']} {pos['volume']} lotes")
                print(f"      Precio: {pos['open_price']:.5f}")
                print(f"      P&L: {pos['profit']:.2f}")
            
            # Esperar un poco
            print("\n‚è≥ Esperando 30 segundos...")
            time.sleep(30)
            
            # Cerrar todas las posiciones
            print("\nüîÑ Cerrando todas las posiciones...")
            closed_count = executor.close_all_positions("Ejemplo_Cierre")
            print(f"‚úÖ Cerradas {closed_count} posiciones")


def ejemplo_funcion_simple():
    """Ejemplo usando la funci√≥n simple."""
    print("\n" + "=" * 60)
    print("EJEMPLO 5: FUNCI√ìN SIMPLE")
    print("=" * 60)
    
    # Datos de se√±al como diccionario
    signal_data = {
        'symbol': 'EURUSD',
        'signal': 'buy',
        'confidence': 0.78,
        'price': 1.0850,
        'probabilities': {'buy': 0.78, 'sell': 0.12, 'hold': 0.10},
        'metadata': {'strategy': 'LIT_ML', 'timeframe': '1h'}
    }
    
    print(f"üéØ Ejecutando se√±al simple: {signal_data['symbol']} {signal_data['signal'].upper()}")
    print(f"   Confianza: {signal_data['confidence']:.3f}")
    
    # Ejecutar usando funci√≥n simple
    success = execute_signal_simple(signal_data)
    
    if success:
        print("‚úÖ Se√±al ejecutada exitosamente")
    else:
        print("‚ùå Error ejecutando se√±al")


def ejemplo_monitoreo_cuenta():
    """Ejemplo de monitoreo de cuenta."""
    print("\n" + "=" * 60)
    print("EJEMPLO 6: MONITOREO DE CUENTA")
    print("=" * 60)
    
    with create_trade_executor("moderate") as executor:
        print("üìä INFORMACI√ìN DE LA CUENTA:")
        print("-" * 40)
        
        account_info = executor.get_account_summary()
        
        for key, value in account_info.items():
            if isinstance(value, float):
                print(f"{key.replace('_', ' ').title()}: {value:.2f}")
            else:
                print(f"{key.replace('_', ' ').title()}: {value}")
        
        print("\nüìà POSICIONES ABIERTAS:")
        print("-" * 40)
        
        positions = executor.get_open_positions()
        if positions:
            for pos in positions:
                print(f"S√≠mbolo: {pos['symbol']}")
                print(f"  Tipo: {pos['type']}")
                print(f"  Volumen: {pos['volume']} lotes")
                print(f"  Precio apertura: {pos['open_price']:.5f}")
                print(f"  Precio actual: {pos['current_price']:.5f}")
                print(f"  P&L: {pos['profit']:.2f}")
                print(f"  Tiempo: {pos['open_time']}")
                print("-" * 20)
        else:
            print("No hay posiciones abiertas")


def main():
    """Ejecuta todos los ejemplos."""
    print("ü§ñ EJEMPLOS DEL TRADE EXECUTOR")
    print("=" * 60)
    print("NOTA: Estos ejemplos usan la cuenta demo configurada.")
    print("      Las operaciones NO afectan dinero real.")
    print("=" * 60)
    
    try:
        # Ejecutar ejemplos
        ejemplo_basico()
        ejemplo_multiples_se√±ales()
        ejemplo_niveles_riesgo()
        ejemplo_gestion_posiciones()
        ejemplo_funcion_simple()
        ejemplo_monitoreo_cuenta()
        
        print("\n" + "=" * 60)
        print("‚úÖ TODOS LOS EJEMPLOS COMPLETADOS")
        print("=" * 60)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Ejemplos interrumpidos por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error en ejemplos: {str(e)}")
        log.error(f"Error en ejemplos: {str(e)}")


if __name__ == "__main__":
    main() 